@rendermode InteractiveServer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(IsEdit ? "Edit Passenger" : "Create New Passenger")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@Model" Validation="@ValidationFunc">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Model.FullName" Label="Full Name" Variant="Variant.Outlined"
                                  For="@(() => Model.FullName)" Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Model.PhoneNumber" Label="Phone Number" Variant="Variant.Outlined"
                                  For="@(() => Model.PhoneNumber)" Required="true" />
                </MudItem>
                @if (IsEdit && UpdateModel != null)
                {
                    <MudItem xs="12">
                        <MudSwitch @bind-Value="UpdateModel.IsActive" Label="Active" Color="Color.Primary" />
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveAsync" Disabled="@Saving">
            @if (Saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">@(IsEdit ? "Updating..." : "Creating...")</MudText>
            }
            else
            {
                <MudText>@(IsEdit ? "Update Passenger" : "Create Passenger")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public CreatePassengerCommand Model { get; set; } = new();
    [Parameter] public UpdatePassengerCommand? UpdateModel { get; set; }
    [Parameter] public Func<object, string, Task<IEnumerable<string>>> ValidationFunc { get; set; } = default!;

    private MudForm? form;
    private bool Saving = false;

    private void Cancel() => MudDialog.Cancel();

    private async Task SaveAsync()
    {
        if (form != null)
        {
            await form.Validate();
            if (!form.IsValid)
                return;
        }

        Saving = true;

        try
        {
            // Sync the data between models if editing
            if (IsEdit && UpdateModel != null)
            {
                UpdateModel.FullName = Model.FullName;
                UpdateModel.PhoneNumber = Model.PhoneNumber;
                MudDialog.Close(DialogResult.Ok(UpdateModel));
            }
            else
            {
                MudDialog.Close(DialogResult.Ok(Model));
            }
        }
        finally
        {
            Saving = false;
        }
    }
}