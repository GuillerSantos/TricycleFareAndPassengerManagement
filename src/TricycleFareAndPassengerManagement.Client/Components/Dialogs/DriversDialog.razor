@rendermode InteractiveServer
@using TricycleFareAndPassengerManagement.Application.Features.Driver.Commands
@using TricycleFareAndPassengerManagement.Client.Common.Validators.Driver

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="@DriverModel" Validation="@validationFunc" ValidationDelay="0">
            <MudContainer Style="max-width: none; padding: 0;">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="DriverModel.FullName"
                                      For="@(() => DriverModel.FullName)"
                                      Label="Full Name"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Required="true"
                                      Immediate="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="DriverModel.LicenseNumber"
                                      For="@(() => DriverModel.LicenseNumber)"
                                      Label="License Number"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Required="true"
                                      Immediate="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="DriverModel.PhoneNumber"
                                      For="@(() => DriverModel.PhoneNumber)"
                                      Label="Phone Number"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Required="true"
                                      Immediate="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="DriverModel.TricycleNumber"
                                      For="@(() => DriverModel.TricycleNumber)"
                                      Label="Tricycle Number"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Required="true"
                                      Immediate="true" />
                    </MudItem>

                    @if (IsEditing)
                    {
                        <MudItem xs="12">
                            <MudSwitch T="bool" @bind-Checked="IsActive"
                                       Label="Active Status"
                                       Color="Color.Success" />
                        </MudItem>
                    }
                </MudGrid>
            </MudContainer>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel"
                   Color="Color.Default"
                   Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton OnClick="Save"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Disabled="@saving">
            @if (saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">@(IsEditing ? "Updating" : "Creating")</MudText>
            }
            else
            {
                <MudText>@(IsEditing ? "Update" : "Create")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public CreateDriverCommand DriverModel { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public int? DriverId { get; set; }
    [Parameter] public List<DriverDto> Drivers { get; set; } = new();
    private MudForm? form;
    private bool IsActive { get; set; } = true;
    private bool saving = false;
    private CreateDriverValidator validator = new();

    private Func<object, string, Task<IEnumerable<string>>> validationFunc => async (model, propertyName) =>
    {
        var result = await validator.ValidateAsync(FluentValidation.ValidationContext<CreateDriverCommand>
            .CreateWithOptions((CreateDriverCommand)model, x => x.IncludeProperties(propertyName)));
        return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
    };

    protected override void OnInitialized()
    {
        if (DriverModel == null)
        {
            DriverModel = new CreateDriverCommand();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Save()
    {
        if (form != null)
        {
            await form.Validate();
            if (!form.IsValid)
                return;
        }

        saving = true;
        try
        {
            // Set the active status for the driver model if needed
            // You might need to add IsActive property to your CreateDriverCommand
            // DriverModel.IsActive = IsActive;

            MudDialog.Close(DialogResult.Ok(DriverModel));
        }
        catch (Exception)
        {
            // Handle any validation or processing errors
            saving = false;
        }
    }
}