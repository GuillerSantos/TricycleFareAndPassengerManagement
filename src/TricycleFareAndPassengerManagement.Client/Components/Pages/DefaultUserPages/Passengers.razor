@page "/passengers"
@inject IPassengerClientService TricycleService
@inject ISnackbar Snackbar
@layout DefaultUserLayout
@attribute [Authorize (Roles = "DefaultUser")]
@rendermode InteractiveServer


<div class="p-6 bg-gray-50 min-h-screen">
    <div class="max-w-7xl mx-auto">
        <div class="mb-6 flex justify-between items-center">
            <h1 class="text-3xl font-bold text-gray-900">Passenger Management</h1>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                       OnClick="OpenCreateDialog" Class="bg-blue-600 hover:bg-blue-700">
                Add Passenger
            </MudButton>
        </div>

        <MudCard Class="shadow-lg">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Registered Passengers</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTextField @bind-Value="searchString" @bind-Value:after="FilterPassengers" 
                                  Placeholder="Search passengers..." Variant="Variant.Outlined" 
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                                  Class="mb-4" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@filteredPassengers" Hover="true" Striped="true" Loading="@loading">
                    <HeaderContent>
                        <MudTh>Full Name</MudTh>
                        <MudTh>Phone Number</MudTh>
                        <MudTh>Date Registered</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Full Name">@context.FullName</MudTd>
                        <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
                        <MudTd DataLabel="Date Registered">@context.DateRegistered.ToString("MMM dd, yyyy")</MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" Size="Size.Small">
                                @(context.IsActive ? "Active" : "Inactive")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" 
                                           OnClick="() => OpenEditDialog(context)" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
        </MudCard>
    </div>
</div>

<MudDialog @bind-IsVisible="showDialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">@(isEdit ? "Edit Passenger" : "Create New Passenger")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@passengerModel" Validation="@(validationFunc)">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="passengerModel.FullName" Label="Full Name" Variant="Variant.Outlined" 
                                  For="@(() => passengerModel.FullName)" Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="passengerModel.PhoneNumber" Label="Phone Number" Variant="Variant.Outlined" 
                                  For="@(() => passengerModel.PhoneNumber)" Required="true" />
                </MudItem>
                @if (isEdit)
                {
                    <MudItem xs="12">
                        <MudSwitch @bind-Value="updatePassengerModel.IsActive" Label="Active" Color="Color.Primary" />
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SavePassenger" Disabled="@saving">
            @if (saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Saving...</MudText>
            }
            else
            {
                <MudText>@(isEdit ? "Update" : "Create")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<PassengerDto> passengers = new();
    private List<PassengerDto> filteredPassengers = new();
    private string searchString = "";
    private bool loading = true;
    private bool showDialog = false;
    private bool isEdit = false;
    private bool saving = false;
    private MudForm form;
    private CreatePassengerCommand passengerModel = new();
    private UpdatePassengerCommand updatePassengerModel = new();
    
    private CreatePassengerValidator createValidator = new();
    private UpdatePassengerValidator updateValidator = new();
    
    private DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private Func<object, string, Task<IEnumerable<string>>> validationFunc => async (model, propertyName) =>
    {
        if (isEdit)
        {
            var result = await updateValidator.ValidateAsync(FluentValidation.ValidationContext<UpdatePassengerCommand>
                .CreateWithOptions((UpdatePassengerCommand)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        }
        else
        {
            var result = await createValidator.ValidateAsync(FluentValidation.ValidationContext<CreatePassengerCommand>
                .CreateWithOptions((CreatePassengerCommand)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPassengers();
    }

    private async Task LoadPassengers()
    {
        loading = true;
        try
        {
            passengers = await TricycleService.GetAllPassengersAsync();
            FilterPassengers();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading passengers: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterPassengers()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredPassengers = passengers;
        }
        else
        {
            filteredPassengers = passengers.Where(p => 
                p.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                p.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void OpenCreateDialog()
    {
        passengerModel = new CreatePassengerCommand();
        isEdit = false;
        showDialog = true;
    }

    private void OpenEditDialog(PassengerDto passenger)
    {
        updatePassengerModel = new UpdatePassengerCommand
        {
            Id = passenger.Id,
            FullName = passenger.FullName,
            PhoneNumber = passenger.PhoneNumber,
            IsActive = passenger.IsActive
        };
        
        passengerModel = new CreatePassengerCommand
        {
            FullName = passenger.FullName,
            PhoneNumber = passenger.PhoneNumber
        };
        
        isEdit = true;
        showDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
        passengerModel = new CreatePassengerCommand();
        updatePassengerModel = new UpdatePassengerCommand();
    }

    private async Task SavePassenger()
    {
        await form.Validate();
        if (!form.IsValid) return;

        saving = true;
        try
        {
            if (isEdit)
            {
                updatePassengerModel.FullName = passengerModel.FullName;
                updatePassengerModel.PhoneNumber = passengerModel.PhoneNumber;
                
                await TricycleService.UpdatePassengerAsync(updatePassengerModel.Id, updatePassengerModel);
                Snackbar.Add("Passenger updated successfully", Severity.Success);
            }
            else
            {
                await TricycleService.CreatePassengerAsync(passengerModel);
                Snackbar.Add("Passenger created successfully", Severity.Success);
            }
            
            CloseDialog();
            await LoadPassengers();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving passenger: {ex.Message}", Severity.Error);
        }
        finally
        {
            saving = false;
        }
    }
}