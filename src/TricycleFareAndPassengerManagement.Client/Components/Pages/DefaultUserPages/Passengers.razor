@page "/passengers"
@inject IPassengerClientService TricycleService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@layout DefaultUserLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@if (isLoading)
{
    <Loader/>
}
else
{
    <div class="p-6 bg-gray-50 min-h-screen">
    <div class="max-w-7xl mx-auto">
        <div class="mb-6 flex justify-between items-center">
            <h1 class="text-3xl font-bold text-gray-900">Passenger Management</h1>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                       OnClick="OpenCreateDialog" Class="bg-blue-600 hover:bg-blue-700">
                Add Passenger
            </MudButton>
        </div>

        <MudCard Class="shadow-lg">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Registered Passengers</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTextField @bind-Value="searchString" @bind-Value:after="FilterPassengers" 
                                  Placeholder="Search passengers..." Variant="Variant.Outlined" 
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                                  Class="mb-4" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@filteredPassengers" Hover="true" Striped="true" Loading="@isLoading">
                    <HeaderContent>
                        <MudTh>Full Name</MudTh>
                        <MudTh>Phone Number</MudTh>
                        <MudTh>Date Registered</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Full Name">@context.FullName</MudTd>
                        <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
                        <MudTd DataLabel="Date Registered">@context.DateRegistered.ToString("MMM dd, yyyy")</MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" Size="Size.Small">
                                @(context.IsActive ? "Active" : "Inactive")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" 
                                           OnClick="() => OpenEditDialog(context)" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
        </MudCard>
    </div>
</div>
}


@code {
    private List<PassengerDto> passengers = new();
    private List<PassengerDto> filteredPassengers = new();
    private string searchString = "";
    private bool isLoading = false;
    private bool showDialog = false;
    private bool isEdit = false;
    private CreatePassengerCommand passengerModel = new();
    private UpdatePassengerCommand updatePassengerModel = new();

    private CreatePassengerValidator createValidator = new();
    private UpdatePassengerValidator updateValidator = new();

    private Func<object, string, Task<IEnumerable<string>>> validationFunc => async (model, propertyName) =>
    {
        if (isEdit)
        {
            var result = await updateValidator.ValidateAsync(
                FluentValidation.ValidationContext<UpdatePassengerCommand>.CreateWithOptions(
                    (UpdatePassengerCommand)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        }
        else
        {
            var result = await createValidator.ValidateAsync(
                FluentValidation.ValidationContext<CreatePassengerCommand>.CreateWithOptions(
                    (CreatePassengerCommand)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPassengers();
        isLoading = false;
    }

    public async Task LoadPassengers()
    {
        isLoading = true;
        try
        {
            passengers = (await TricycleService.GetAllPassengersAsync()).ToList();
            FilterPassengers();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading passengers: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterPassengers()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredPassengers = passengers;
        }
        else
        {
            filteredPassengers = passengers.Where(p =>
                p.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                p.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async void OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { "Model", new CreatePassengerCommand() },
            { "IsEdit", false },
            { "ValidationFunc", validationFunc }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<PassengerDialog>("Create Passenger", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CreatePassengerCommand passengerData)
        {
            try
            {
                await TricycleService.CreatePassengerAsync(passengerData);
                Snackbar.Add("Passenger created successfully", Severity.Success);
                await LoadPassengers();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error creating passenger: {ex.Message}", Severity.Error);
            }
        }
    }

    private async void OpenEditDialog(PassengerDto passenger)
    {
        var createModel = new CreatePassengerCommand
        {
            FullName = passenger.FullName,
            PhoneNumber = passenger.PhoneNumber
        };
    
        var updateModel = new UpdatePassengerCommand
        {
            Id = passenger.Id,
            FullName = passenger.FullName,
            PhoneNumber = passenger.PhoneNumber,
            IsActive = passenger.IsActive
        };

        var parameters = new DialogParameters
        {
            { "Model", createModel },
            { "UpdateModel", updateModel },
            { "IsEdit", true },
            { "ValidationFunc", validationFunc }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<PassengerDialog>("Edit Passenger", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is UpdatePassengerCommand updatedData)
        {
            try
            {
                await TricycleService.UpdatePassengerAsync(updatedData.Id, updatedData);
                Snackbar.Add("Passenger updated successfully", Severity.Success);
                await LoadPassengers();
                await InvokeAsync(StateHasChanged);

            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating passenger: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OnDialogSaved(bool saved)
    {
        if (saved)
        {
            try
            {
                if (isEdit)
                {
                    updatePassengerModel.FullName = passengerModel.FullName;
                    updatePassengerModel.PhoneNumber = passengerModel.PhoneNumber;

                    await TricycleService.UpdatePassengerAsync(updatePassengerModel.Id, updatePassengerModel);
                    Snackbar.Add("Passenger updated successfully", Severity.Success);
                }
                else
                {
                    await TricycleService.CreatePassengerAsync(passengerModel);
                    Snackbar.Add("Passenger created successfully", Severity.Success);
                }

                showDialog = false;
                await LoadPassengers();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error saving passenger: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            showDialog = false;
        }
    }
}
