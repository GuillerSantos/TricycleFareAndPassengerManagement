@page "/"
@inject IAuthService AuthService
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@layout AuthLayout
@attribute [AllowAnonymous]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@if (isLoading)
{
    <Loader />
}
else
{
    <div class="min-h-screen flex">
        <div class="hidden lg:flex lg:w-1/2 xl:w-3/5 relative overflow-hidden mt-10">
            <div class="absolute inset-0 bg-fit bg-center bg-no-repeat"
                 style="background-image: url('Images/TFPM.jpg'); height: 100vh; width: 50vw ">
            </div>
        </div>

        <div class="w-full lg:w-1/2 xl:w-2/5 flex items-center justify-center p-6 sm:p-8 lg:p-12">
            <div class="w-full max-w-md space-y-8">
                <div class="text-center">
                    <div class="mx-auto w-16 h-16 flex items-center justify-center mb-6">
                        <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Success" Size="Size.Large" Class="text-white" />
                    </div>
                    <h2 class="text-3xl font-bold text-gray-900 mb-2">
                        Sign in to your account
                    </h2>
                </div>

                <!-- Login Form Card -->
                <MudCard Class="shadow-2xl border-0 bg-white/90 backdrop-blur-md rounded-2xl">
                    <MudCardContent Class="p-8">
                        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">
                            <DataAnnotationsValidator />

                            <div class="space-y-6">
                                <!-- Email Field -->
                                <div class="relative">
                                    <MudTextField @bind-Value="loginModel.Email"
                                                  Label="Email Address"
                                                  Variant="Variant.Outlined"
                                                  InputType="InputType.Email"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                                  AdornmentColor="Color.Success"
                                                  FullWidth="true"
                                                  For="@(() => loginModel.Email)" />
                                </div>

                                <!-- Password Field -->
                                <div class="relative">
                                    <MudTextField @bind-Value="loginModel.Password"
                                                  Label="Password"
                                                  Variant="Variant.Outlined"
                                                  InputType="@ShowPasswordUtil.InputType"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@ShowPasswordUtil.Icon"
                                                  AdornmentColor="Color.Success"
                                                  OnAdornmentClick="ShowPasswordUtil.Toggle"
                                                  FullWidth="true"
                                                  For="@(() => loginModel.Password)" />
                                </div>

                                <!-- Remember Me & Forgot Password -->
                                <div class="flex items-center justify-between">
                                    <MudCheckBox @bind-Value="loginModel.RememberMe"
                                                 Label="Remember me"
                                                 Color="Color.Primary"
                                                 Class="text-sm" />

                                    <MudLink Href="/forgot-password"
                                             Class="text-sm font-medium text-indigo-600 hover:text-indigo-500 transition-colors">
                                        Forgot password?
                                    </MudLink>
                                </div>

                                <!-- Sign In Button -->
                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           Size="Size.Large"
                                           Class="w-full h-12 bg-gradient-to-r from-green-800 to-green-600 hover:from-green-900 hover:to-green-700 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transform transition-all duration-200 hover:scale-[1.02]">
                                    Sign In
                                </MudButton>

                            </div>
                        </EditForm>
                    </MudCardContent>
                </MudCard>

                <!-- Social Login Section -->
                <div class="space-y-4">
                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-gray-300"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-4 bg-gradient-to-br from-slate-50 to-blue-50 text-gray-500 font-medium">
                                Or continue with
                            </span>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-3">
                        <MudButton Variant="Variant.Outlined"
                                   Class="w-full h-11 border-gray-300 hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 rounded-lg">
                            <MudIcon Icon="@Icons.Custom.Brands.Google" Class="mr-2 text-red-500" />
                            <span class="font-medium">Google</span>
                        </MudButton>

                        <MudButton Variant="Variant.Outlined"
                                   Class="w-full h-11 border-gray-300 hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 rounded-lg">
                            <MudIcon Icon="@Icons.Custom.Brands.Microsoft" Class="mr-2 text-blue-500" />
                            <span class="font-medium">Microsoft</span>
                        </MudButton>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private LoginModel loginModel = new();
    private AuthResult authResult = new();
    private bool isLoading = false;
    private bool _hasRendered = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var result = await AuthService.LoginAsync(loginModel);

            if (result?.Success == true && result.User != null)
            {
                // Small delay to ensure localStorage is updated
                await Task.Delay(200);

                // Notify auth state provider
                await CustomAuthStateProvider.NotifyUserAuthentication();

                // Another small delay for auth state to propagate
                await Task.Delay(300);

                // Navigate without forceLoad to avoid server-side rendering issues
                var role = result.User.Roles?.FirstOrDefault() ?? string.Empty;

                if (role == "Admin")
                {
                    Navigation.NavigateTo("/admindashboard");
                }
                else if (role == "DefaultUser")
                {
                    Navigation.NavigateTo("/userdashboard");
                }
                else
                {
                    Snackbar.Add($"Unrecognized role: {role}", Severity.Warning);
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                var errorMessage = result?.Errors?.FirstOrDefault() ?? "Login failed";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Login exception: {ex}");
            Snackbar.Add($"An error occurred during login: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}