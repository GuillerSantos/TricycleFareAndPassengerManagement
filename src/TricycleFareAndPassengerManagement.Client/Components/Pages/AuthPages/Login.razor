@page "/"
@inject IAuthService AuthService
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@attribute [AllowAnonymous]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@if (isLoading)
{
    <Loader/>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <div class="min-h-screen flex items-center justify-center py-7 px-4 sm:px-6 lg:px-8">
            <div class="max-w-lg w-full space-y-8">
                <div class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Class="mx-auto h-12 w-12 text-indigo-600" />
                    <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                        Sign in to your account
                    </h2>
                    <p class="mt-2 text-sm text-gray-600">
                        Or
                        <MudLink Href="/register" Class="font-medium text-indigo-600 hover:text-indigo-500 ml-1">
                            create a new account
                        </MudLink>
                    </p>
                </div>

                <MudCard Class="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
                    <MudCardContent Class="p-8">
                        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">
                            <DataAnnotationsValidator />
                    
                            <div class="space-y-6">
                                <MudTextField @bind-Value="loginModel.Email"
                                              Label="Email Address"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Email"
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Email"
                                              Class="w-full"
                                              For="@(() => loginModel.Email)" />

                                <MudTextField @bind-Value="loginModel.Password"
                                              Label="Password"
                                              Variant="Variant.Outlined"
                                              InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                              OnAdornmentClick="@(() => _showPassword = !_showPassword)"
                                              Class="w-full"
                                              For="@(() => loginModel.Password)" />

                                <div class="flex items-center justify-between">
                                    <MudCheckBox @bind-Value="loginModel.RememberMe"
                                                 Label="Remember me"
                                                 Color="Color.Primary" />
                            
                                    <MudLink Href="/forgot-password" Class="text-sm text-indigo-600 hover:text-indigo-500">
                                        Forgot your password?
                                    </MudLink>
                                </div>

                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           Size="Size.Large"
                                           Class="w-full h-12 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 transform transition-all duration-200 hover:scale-105"
                                           Disabled="@isLoading">
                                           <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-2" />
                                           <span>Sign in</span>
                                </MudButton>
                            </div>
                        </EditForm>
                    </MudCardContent>
                </MudCard>

                <!-- Social Login Options -->
                <div class="mt-6">
                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-gray-300"></div>
                        </div>
                        <div class="relative flex justify-center text-sm">
                            <span class="px-2 bg-gradient-to-br from-blue-50 to-indigo-100 text-gray-500">Or continue with</span>
                        </div>
                    </div>

                    <div class="mt-6 grid grid-cols-2 gap-3">
                        <MudButton Variant="Variant.Outlined"
                                   Class="w-full border-gray-300 hover:bg-gray-50 transition-colors duration-200">
                            <MudIcon Icon="@Icons.Custom.Brands.Google" Class="mr-2" />
                            Google
                        </MudButton>

                        <MudButton Variant="Variant.Outlined"
                                   Class="w-full border-gray-300 hover:bg-gray-50 transition-colors duration-200">
                            <MudIcon Icon="@Icons.Custom.Brands.Microsoft" Class="mr-2" />
                            Microsoft
                        </MudButton>
                    </div>
                </div>
            </div>
        </div>
    </MudContainer>
}

@code {
    private LoginModel loginModel = new();
    private AuthResult authResult = new();
    private bool _showPassword = false;
    private bool isLoading = false;
    private bool _hasRendered = false;

private async Task HandleLogin()
{
    isLoading = true;
    await InvokeAsync(StateHasChanged);

    try
    {
        var result = await AuthService.LoginAsync(loginModel);

        if (result?.Success == true && result.User != null)
        {
            // Small delay to ensure localStorage is updated
            await Task.Delay(200);

            // Notify auth state provider
            await CustomAuthStateProvider.NotifyUserAuthentication();

            // Another small delay for auth state to propagate
            await Task.Delay(300);

            // Navigate without forceLoad to avoid server-side rendering issues
            var role = result.User.Roles?.FirstOrDefault() ?? string.Empty;
            
            if (role == "Admin")
            {
                Navigation.NavigateTo("/admindashboard");
            }
            else if (role == "DefaultUser")
            {
                Navigation.NavigateTo("/userdashboard");
            }
            else
            {
                Snackbar.Add($"Unrecognized role: {role}", Severity.Warning);
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            var errorMessage = result?.Errors?.FirstOrDefault() ?? "Login failed";
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }
    catch (Exception ex)
    {
        await JSRuntime.InvokeVoidAsync("console.error", $"Login exception: {ex}");
        Snackbar.Add($"An error occurred during login: {ex.Message}", Severity.Error);
    }
    finally
    {
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}
}