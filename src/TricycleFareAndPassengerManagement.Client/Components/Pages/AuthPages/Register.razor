@page "/register"
@inject IAuthService AuthService
@layout AuthLayout
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="text-center">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Success" Size="Size.Large" Class="mx-auto h-12 w-12 text-purple-600" />
            <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                Create your account
            </h2>
            <p class="mt-2 text-sm text-gray-600">
                Already have an account?
                <MudLink Href="/" Class="font-medium text-purple-600 hover:text-purple-500 ml-1">
                    Sign in here
                </MudLink>
            </p>
        </div>

        <MudCard Class="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
            <MudCardContent Class="p-8">
                <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" FormName="RegisterForm">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-6 gap-3">
                            <MudTextField @bind-Value="registerModel.FullName"
                                          Label="Full Name"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          FullWidth="true"
                                          AdornmentColor="Color.Success"
                                          AdornmentIcon="@Icons.Material.Filled.Person"
                                          For="@(() => registerModel.FullName)" />

                        <MudTextField @bind-Value="registerModel.Email"
                                      Label="Email Address"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Adornment="Adornment.Start"
                                      AdornmentColor="Color.Success"
                                      AdornmentIcon="@Icons.Material.Filled.Email"
                                          FullWidth="true"
                                      For="@(() => registerModel.Email)" />

                        <MudTextField @bind-Value="registerModel.Password"
                                      Label="Password"
                                      Variant="Variant.Outlined"
                                      InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                      OnAdornmentClick="@(() => _showPassword = !_showPassword)"
                                          FullWidth="true"
                                      For="@(() => registerModel.Password)" />

                        <MudTextField @bind-Value="registerModel.ConfirmPassword"
                                      Label="Confirm Password"
                                      Variant="Variant.Outlined"
                                      InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                      OnAdornmentClick="@(() => _showConfirmPassword = !_showConfirmPassword)"
                                          FullWidth="true"
                                      For="@(() => registerModel.ConfirmPassword)" />
                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Success"
                                   Size="Size.Large"
                                   Class="w-full h-12 bg-gradient-to-r from-green-800 to-green-600 hover:from-green-900 hover:to-green-700 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transform transition-all duration-200 hover:scale-[1.02]">
                                Sign Up
                        </MudButton>
                    </div>
                </EditForm>
            </MudCardContent>
        </MudCard>

                <div class="hidden lg:flex lg:w-1/2 xl:w-3/5 relative overflow-hidden mt-10">
            <div class="absolute inset-0 bg-fit bg-center bg-no-repeat"
                 style="background-image: url('Images/TFPM.jpg'); height: 100vh; width: 50vw ">
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        Console.WriteLine($"User authenticated: {isAuthenticated}");
    }

    private async Task HandleRegister()
    {
        _isLoading = true;
        try
        {
            var result = await AuthService.RegisterAsync(registerModel);
            
            if (result.Success)
            {
                Snackbar.Add($"Welcome, {result.User?.FullName}! Your account has been created.", Severity.Success);
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    Snackbar.Add(error, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
}